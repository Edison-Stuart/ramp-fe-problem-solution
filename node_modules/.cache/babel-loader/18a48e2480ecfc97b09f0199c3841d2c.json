{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithoutCache,\n    loading,\n    clearCache\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  clearCache();\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithoutCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: previousResponse.data.concat(response.data),\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"Etthd3Gi2RKR9dx1JK7XtGbV/84=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithoutCache","loading","clearCache","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","concat","fetchWithCache","invalidateData"],"sources":["/home/edison/TakeHomeWork/Ramp/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithoutCache, loading, clearCache } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n  clearCache()\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithoutCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      return { data: previousResponse.data.concat(response.data), nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,iBAAF;IAAqBC,OAArB;IAA8BC;EAA9B,IAA6CJ,cAAc,EAAjE;EACA,MAAM,CAACK,qBAAD,EAAwBC,wBAAxB,IAAoDP,QAAQ,CAExD,IAFwD,CAAlE;EAGAK,UAAU;EACV,MAAMG,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvC,MAAMU,QAAQ,GAAG,MAAMN,iBAAiB,CACtC,uBADsC,EAEtC;MACEO,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFsC,CAAxC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAED,OAAO;QAAEI,IAAI,EAAED,gBAAgB,CAACC,IAAjB,CAAsBC,MAAtB,CAA6BL,QAAQ,CAACI,IAAtC,CAAR;QAAqDF,QAAQ,EAAEF,QAAQ,CAACE;MAAxE,CAAP;IACD,CANuB,CAAxB;EAOD,CAf2B,EAezB,CAACI,cAAD,EAAiBT,qBAAjB,CAfyB,CAA5B;EAiBA,MAAMU,cAAc,GAAGjB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BF,OAA/B;IAAwCI,QAAxC;IAAkDQ;EAAlD,CAAP;AACD;;GA5Bed,wB;UACqCD,c"},"metadata":{},"sourceType":"module"}