{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nexport const cacheUtils = {\n  cacheNeedsUpdating: false,\n\n  setCacheNeedsUpdating(value) {\n    this.cacheNeedsUpdating = value;\n  }\n\n}; // export let cacheNeedsUpdating: boolean\n// export const setCacheNeedsUpdating = (value: boolean) => {\n//   cacheNeedsUpdating = value\n// }\n\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const Newtransaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!Newtransaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  data.transactions.forEach((transaction, i, arr) => {\n    if (transaction.id === transactionId) {\n      arr[i].approved = value;\n    }\n  });\n  cacheNeedsUpdating = true;\n  return Newtransaction.approved;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","cacheUtils","cacheNeedsUpdating","setCacheNeedsUpdating","value","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","Newtransaction","find","currentTransaction","forEach","i","arr","approved"],"sources":["/home/edison/TakeHomeWork/Ramp/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n  AppDataParams,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nexport const cacheUtils = {\n  cacheNeedsUpdating: false,\n  setCacheNeedsUpdating(value: boolean) {\n    this.cacheNeedsUpdating = value\n  },\n}\n\n// export let cacheNeedsUpdating: boolean\n// export const setCacheNeedsUpdating = (value: boolean) => {\n//   cacheNeedsUpdating = value\n// }\n\nconst data: AppDataParams = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({\n  transactionId,\n  value,\n}: SetTransactionApprovalParams): boolean => {\n  const Newtransaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n  if (!Newtransaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  data.transactions.forEach((transaction, i, arr) => {\n    if (transaction.id === transactionId) {\n      arr[i].approved = value\n    }\n  })\n  cacheNeedsUpdating = true\n  return Newtransaction.approved\n}\n"],"mappings":"AASA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,OAAO,MAAMC,UAAU,GAAG;EACxBC,kBAAkB,EAAE,KADI;;EAExBC,qBAAqB,CAACC,KAAD,EAAiB;IACpC,KAAKF,kBAAL,GAA0BE,KAA1B;EACD;;AAJuB,CAAnB,C,CAOP;AACA;AACA;AACA;;AAEA,MAAMC,IAAmB,GAAG;EAC1BC,SAAS,EAAEP,QAAQ,CAACO,SADM;EAE1BC,YAAY,EAAER,QAAQ,CAACQ;AAFG,CAA5B;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGV,qBAArB;EACA,MAAMa,GAAG,GAAGD,KAAK,GAAGZ,qBAApB;;EAEA,IAAIY,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAON,IAAI,CAACE,YAAL,CAAkBY,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAGO;EAAA,IAHN;IACrCC,aADqC;IAErCpB;EAFqC,CAGM;EAC3C,MAAMqB,cAAc,GAAGpB,IAAI,CAACE,YAAL,CAAkBmB,IAAlB,CACpBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aAD7B,CAAvB;;EAGA,IAAI,CAACC,cAAL,EAAqB;IACnB,MAAM,IAAId,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDN,IAAI,CAACE,YAAL,CAAkBqB,OAAlB,CAA0B,CAACR,WAAD,EAAcS,CAAd,EAAiBC,GAAjB,KAAyB;IACjD,IAAIV,WAAW,CAACE,EAAZ,KAAmBE,aAAvB,EAAsC;MACpCM,GAAG,CAACD,CAAD,CAAH,CAAOE,QAAP,GAAkB3B,KAAlB;IACD;EACF,CAJD;EAKAF,kBAAkB,GAAG,IAArB;EACA,OAAOuB,cAAc,CAACM,QAAtB;AACD,CAlBM"},"metadata":{},"sourceType":"module"}