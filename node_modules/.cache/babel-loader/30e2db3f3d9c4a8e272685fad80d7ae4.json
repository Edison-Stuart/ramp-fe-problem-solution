{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    let data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n\n    if (!transactionsByEmployee) {\n      setTransactionsByEmployee(data);\n    } else {\n      var _data;\n\n      data = (_data = data) === null || _data === void 0 ? void 0 : _data.concat(transactionsByEmployee);\n      setTransactionsByEmployee(newData);\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","concat","newData","invalidateData"],"sources":["/home/edison/TakeHomeWork/Ramp/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      let data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\"transactionsByEmployee\", {\n        employeeId,\n      })\n      if (!transactionsByEmployee) {\n        setTransactionsByEmployee(data)\n      } else {\n        data = data?.concat(transactionsByEmployee)\n        setTransactionsByEmployee(newData)\n      }\n    },\n    [fetchWithCache]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B,IAAIC,IAAI,GAAG,MAAMN,cAAc,CAAyC,wBAAzC,EAAmE;MAChGK;IADgG,CAAnE,CAA/B;;IAGA,IAAI,CAACH,sBAAL,EAA6B;MAC3BC,yBAAyB,CAACG,IAAD,CAAzB;IACD,CAFD,MAEO;MAAA;;MACLA,IAAI,YAAGA,IAAH,0CAAG,MAAMC,MAAN,CAAaL,sBAAb,CAAP;MACAC,yBAAyB,CAACK,OAAD,CAAzB;IACD;EACF,CAX0B,EAY3B,CAACR,cAAD,CAZ2B,CAA7B;EAeA,MAAMS,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEG,IAAI,EAAEJ,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDK;EAApD,CAAP;AACD;;GAxBeV,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}