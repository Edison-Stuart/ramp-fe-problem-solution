{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext, useState } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const [cacheNeedsUpdating, setCacheNeedsUpdating] = useState(false);\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    wrappedRequest,\n    loading\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const cacheKey = getCacheKey(endpoint, params);\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    } else {\n      const result = await fakeFetch(endpoint, params);\n      cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n      return result;\n    }\n  }), [cache, wrappedRequest]);\n  const clearCache = useCallback(() => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    cache.current = new Map();\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  const fetchWithoutCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    if (endpoint === \"setTransactionApproval\") {\n      clearCacheByEndpoint([\"paginatedTransactions\"]);\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    return result;\n  }), [wrappedRequest, clearCacheByEndpoint]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"C/5EKtKIpAKGmzPwIkGhbTD+ZCo=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","useState","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cacheNeedsUpdating","setCacheNeedsUpdating","cache","wrappedRequest","loading","fetchWithCache","endpoint","params","cacheKey","getCacheKey","cacheResponse","current","get","data","JSON","parse","result","set","stringify","clearCache","undefined","Map","clearCacheByEndpoint","endpointsToClear","cacheKeys","Array","from","keys","key","clearKey","some","startsWith","delete","fetchWithoutCache"],"sources":["/home/edison/TakeHomeWork/Ramp/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext, useState } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { RegisteredEndpoints, fakeFetch } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const [cacheNeedsUpdating, setCacheNeedsUpdating] = useState(false)\n  const { cache } = useContext(AppContext)\n  const { wrappedRequest, loading } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest(async () => {\n        const cacheKey = getCacheKey(endpoint, params)\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data\n        } else {\n          const result = await fakeFetch(endpoint, params)\n          cache?.current.set(cacheKey, JSON.stringify(result))\n          return result\n        }\n      }),\n    [cache, wrappedRequest]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current === undefined) {\n      return\n    }\n\n    cache.current = new Map<string, string>()\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  const fetchWithoutCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest(async () => {\n        if (endpoint === \"setTransactionApproval\") {\n          clearCacheByEndpoint([\"paginatedTransactions\"])\n        }\n        const result = await fakeFetch<TData>(endpoint, params)\n        return result\n      }),\n    [wrappedRequest, clearCacheByEndpoint]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}