{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithoutCache,\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [allEmployeeTransactions, setAllEmployeeTransactions] = useState(null);\n  const fetchAllEmployeeTransactions = useEffect(() => {\n    const getData = async () => {\n      const employeeData = await fetchWithoutCache(\"employees\");\n\n      if (employeeData) {\n        let employeeTransactions = null;\n        employeeData.forEach(async employee => await fetchWithCache(\"transactionsByEmployee\", {\n          employeeId: employee.id\n        }).then(transaction => {\n          if (transaction) {\n            employeeTransactions === null || employeeTransactions === void 0 ? void 0 : employeeTransactions.concat(transaction);\n          }\n        }));\n        console.log(employeeTransactions);\n        setAllEmployeeTransactions(employeeTransactions);\n      }\n    };\n\n    getData();\n  }, []);\n  const fetchById = useCallback(employeeId => {\n    const data = allEmployeeTransactions === null || allEmployeeTransactions === void 0 ? void 0 : allEmployeeTransactions.filter(transaction => transaction.every(item => item.employee.id === employeeId));\n    console.log(data); // const data = allEmployeeTransactions?.filter((transaction) => console.log(transaction))\n    // setTransactionsByEmployee(data)\n  }, [allEmployeeTransactions]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"slxrQ/CGPHcddfwAz8XhobPomPY=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useEffect","useState","useCustomFetch","useTransactionsByEmployee","fetchWithoutCache","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","allEmployeeTransactions","setAllEmployeeTransactions","fetchAllEmployeeTransactions","getData","employeeData","employeeTransactions","forEach","employee","employeeId","id","then","transaction","concat","console","log","fetchById","data","filter","every","item","invalidateData"],"sources":["/home/edison/TakeHomeWork/Ramp/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { Employee } from \"../utils/types\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithoutCache, fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n  const [allEmployeeTransactions, setAllEmployeeTransactions] = useState<[Transaction[]] | null>(null)\n\n  const fetchAllEmployeeTransactions = useEffect(() => {\n    const getData = async () => {\n      const employeeData = await fetchWithoutCache<Employee[]>(\"employees\")\n      if (employeeData) {\n        let employeeTransactions: [Transaction[]] | null = null\n        employeeData.forEach(\n          async (employee) =>\n            await fetchWithCache<Transaction[], RequestByEmployeeParams>(\"transactionsByEmployee\", {\n              employeeId: employee.id,\n            }).then((transaction) => {\n              if (transaction) {\n                employeeTransactions?.concat(transaction)\n              }\n            })\n        )\n        console.log(employeeTransactions)\n        setAllEmployeeTransactions(employeeTransactions)\n      }\n    }\n    getData()\n  }, [])\n\n  const fetchById = useCallback(\n    (employeeId: string) => {\n      const data = allEmployeeTransactions?.filter((transaction) =>\n        transaction.every((item) => item.employee.id === employeeId)\n      )\n      console.log(data)\n      // const data = allEmployeeTransactions?.filter((transaction) => console.log(transaction))\n      // setTransactionsByEmployee(data)\n    },\n    [allEmployeeTransactions]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,iBAAF;IAAqBC,cAArB;IAAqCC;EAArC,IAAiDJ,cAAc,EAArE;EACA,MAAM,CAACK,sBAAD,EAAyBC,yBAAzB,IAAsDP,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACQ,uBAAD,EAA0BC,0BAA1B,IAAwDT,QAAQ,CAAyB,IAAzB,CAAtE;EAEA,MAAMU,4BAA4B,GAAGX,SAAS,CAAC,MAAM;IACnD,MAAMY,OAAO,GAAG,YAAY;MAC1B,MAAMC,YAAY,GAAG,MAAMT,iBAAiB,CAAa,WAAb,CAA5C;;MACA,IAAIS,YAAJ,EAAkB;QAChB,IAAIC,oBAA4C,GAAG,IAAnD;QACAD,YAAY,CAACE,OAAb,CACE,MAAOC,QAAP,IACE,MAAMX,cAAc,CAAyC,wBAAzC,EAAmE;UACrFY,UAAU,EAAED,QAAQ,CAACE;QADgE,CAAnE,CAAd,CAEHC,IAFG,CAEGC,WAAD,IAAiB;UACvB,IAAIA,WAAJ,EAAiB;YACfN,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,CAAEO,MAAtB,CAA6BD,WAA7B;UACD;QACF,CANK,CAFV;QAUAE,OAAO,CAACC,GAAR,CAAYT,oBAAZ;QACAJ,0BAA0B,CAACI,oBAAD,CAA1B;MACD;IACF,CAjBD;;IAkBAF,OAAO;EACR,CApB6C,EAoB3C,EApB2C,CAA9C;EAsBA,MAAMY,SAAS,GAAGzB,WAAW,CAC1BkB,UAAD,IAAwB;IACtB,MAAMQ,IAAI,GAAGhB,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEiB,MAAzB,CAAiCN,WAAD,IAC3CA,WAAW,CAACO,KAAZ,CAAmBC,IAAD,IAAUA,IAAI,CAACZ,QAAL,CAAcE,EAAd,KAAqBD,UAAjD,CADW,CAAb;IAGAK,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAJsB,CAKtB;IACA;EACD,CAR0B,EAS3B,CAAChB,uBAAD,CAT2B,CAA7B;EAYA,MAAMoB,cAAc,GAAG9B,WAAW,CAAC,MAAM;IACvCS,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEiB,IAAI,EAAElB,sBAAR;IAAgCD,OAAhC;IAAyCkB,SAAzC;IAAoDK;EAApD,CAAP;AACD;;GA5Ce1B,yB;UACyCD,c"},"metadata":{},"sourceType":"module"}