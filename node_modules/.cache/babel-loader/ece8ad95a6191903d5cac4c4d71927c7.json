{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithoutCache,\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [allEmployeeTransactions, setAllEmployeeTransactions] = useState();\n  const fetchAllEmployeeTransactions = useEffect(() => {\n    const getData = async () => {\n      const employeeData = await fetchWithoutCache(\"employees\");\n\n      if (employeeData) {\n        const employeeTransactions = employeeData.map(async employee => await fetchWithCache(\"transactionsByEmployee\", {\n          employeeId: employee.id\n        }).then(transaction => {\n          return transaction;\n        })); // setAllEmployeeTransactions(employeeTransactions)\n      }\n    };\n\n    getData();\n  }, []);\n  const fetchById = useCallback(employeeId => {\n    console.log(allEmployeeTransactions);\n\n    if (allEmployeeTransactions) {\n      const data = allEmployeeTransactions;\n    } // transactions?.filter((transaction) => {\n    //   return transaction.employee.id === employeeId\n    // })\n\n  }, // const data = allEmployeeTransactions?.filter((transaction) => console.log(transaction))\n  // setTransactionsByEmployee(data)\n  [allEmployeeTransactions]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"lO8BA7yLMxEm74HuaAAbMyTuYZ8=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useEffect","useState","useCustomFetch","useTransactionsByEmployee","fetchWithoutCache","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","allEmployeeTransactions","setAllEmployeeTransactions","fetchAllEmployeeTransactions","getData","employeeData","employeeTransactions","map","employee","employeeId","id","then","transaction","fetchById","console","log","data","invalidateData"],"sources":["/home/edison/TakeHomeWork/Ramp/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { Employee } from \"../utils/types\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithoutCache, fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n  const [allEmployeeTransactions, setAllEmployeeTransactions] =\n    useState<Promise<Transaction[] | null>[]>()\n\n  const fetchAllEmployeeTransactions = useEffect(() => {\n    const getData = async () => {\n      const employeeData = await fetchWithoutCache<Employee[]>(\"employees\")\n      if (employeeData) {\n        const employeeTransactions = employeeData.map(\n          async (employee) =>\n            await fetchWithCache<Transaction[], RequestByEmployeeParams>(\"transactionsByEmployee\", {\n              employeeId: employee.id,\n            }).then((transaction) => {\n              return transaction\n            })\n        )\n        // setAllEmployeeTransactions(employeeTransactions)\n      }\n    }\n    getData()\n  }, [])\n\n  const fetchById = useCallback(\n    (employeeId: string) => {\n      console.log(allEmployeeTransactions)\n      if (allEmployeeTransactions) {\n        const data = allEmployeeTransactions\n      }\n      // transactions?.filter((transaction) => {\n      //   return transaction.employee.id === employeeId\n      // })\n    },\n    // const data = allEmployeeTransactions?.filter((transaction) => console.log(transaction))\n    // setTransactionsByEmployee(data)\n    [allEmployeeTransactions]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,iBAAF;IAAqBC,cAArB;IAAqCC;EAArC,IAAiDJ,cAAc,EAArE;EACA,MAAM,CAACK,sBAAD,EAAyBC,yBAAzB,IAAsDP,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACQ,uBAAD,EAA0BC,0BAA1B,IACJT,QAAQ,EADV;EAGA,MAAMU,4BAA4B,GAAGX,SAAS,CAAC,MAAM;IACnD,MAAMY,OAAO,GAAG,YAAY;MAC1B,MAAMC,YAAY,GAAG,MAAMT,iBAAiB,CAAa,WAAb,CAA5C;;MACA,IAAIS,YAAJ,EAAkB;QAChB,MAAMC,oBAAoB,GAAGD,YAAY,CAACE,GAAb,CAC3B,MAAOC,QAAP,IACE,MAAMX,cAAc,CAAyC,wBAAzC,EAAmE;UACrFY,UAAU,EAAED,QAAQ,CAACE;QADgE,CAAnE,CAAd,CAEHC,IAFG,CAEGC,WAAD,IAAiB;UACvB,OAAOA,WAAP;QACD,CAJK,CAFmB,CAA7B,CADgB,CAShB;MACD;IACF,CAbD;;IAcAR,OAAO;EACR,CAhB6C,EAgB3C,EAhB2C,CAA9C;EAkBA,MAAMS,SAAS,GAAGtB,WAAW,CAC1BkB,UAAD,IAAwB;IACtBK,OAAO,CAACC,GAAR,CAAYd,uBAAZ;;IACA,IAAIA,uBAAJ,EAA6B;MAC3B,MAAMe,IAAI,GAAGf,uBAAb;IACD,CAJqB,CAKtB;IACA;IACA;;EACD,CAT0B,EAU3B;EACA;EACA,CAACA,uBAAD,CAZ2B,CAA7B;EAeA,MAAMgB,cAAc,GAAG1B,WAAW,CAAC,MAAM;IACvCS,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEgB,IAAI,EAAEjB,sBAAR;IAAgCD,OAAhC;IAAyCe,SAAzC;IAAoDI;EAApD,CAAP;AACD;;GA5CetB,yB;UACyCD,c"},"metadata":{},"sourceType":"module"}